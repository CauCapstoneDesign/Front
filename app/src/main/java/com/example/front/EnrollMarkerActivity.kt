package com.example.frontimport android.Manifestimport android.app.Activityimport android.content.ContentValuesimport android.content.DialogInterfaceimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport kotlinx.android.synthetic.main.activity_enroll_marker.*import android.util.Logimport android.view.Viewimport android.content.Intentimport android.net.Uriimport android.os.Environmentimport androidx.appcompat.app.AlertDialogimport android.provider.MediaStore.*import androidx.core.content.FileProviderimport com.gun0912.tedpermission.PermissionListenerimport com.gun0912.tedpermission.TedPermissionimport java.io.Fileimport java.io.IOExceptionimport android.graphics.Bitmapimport android.os.AsyncTaskimport android.util.Base64import android.widget.*import com.example.RequestHttpURLConnectionimport com.example.front.R.*import java.io.ByteArrayOutputStreamimport java.net.URLDecoderimport java.net.URLEncoderclass EnrollMarkerActivity : AppCompatActivity() {    private lateinit var addImageButton: ImageView    private lateinit var addresNname: TextView    private lateinit var imageview: ImageView    private lateinit var uploadbutton : Button    private lateinit var spotName :EditText    private var imgUri: Uri? = null    private var photoURI: Uri? = null    private var albumURI: Uri? = null    private val FROM_CAMERA = 0    private val FROM_ALBUM = 1    private var upLoadServerUri :String ="http://18.222.119.238:3000/Spot/newspot"    private lateinit var mCurrentPhotoPath: String  //이미지파일의 절대 경로    private lateinit var encodedImage :String    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(layout.activity_enroll_marker)        addresNname = addressname        addImageButton = addImagebutton        imageview = imageView        uploadbutton = button        spotName=spotname        val intents = intent        val latitude = intents.getStringExtra("marker.lat")        val longitude = intents.getStringExtra("marker.long")        val addr = intents.getStringExtra("marker.addr")        Log.d("인텐트 맵좌표", "좌표: 위도(" + latitude!!.toString() + "),경도(" + (longitude!!.toString()) + ")" + addr!!.toString())        addressname.text = addr        //Permission 얻는부분        getPermission()        addImageButton.setOnClickListener(object : View.OnClickListener {            override fun onClick(var1: View) {                makeDialog()            }        })        uploadbutton.setOnClickListener(object : View.OnClickListener {            override fun onClick(var1: View) {                val alt_bld = AlertDialog.Builder(this@EnrollMarkerActivity, style.MyAlertDialogStyle)                alt_bld.setTitle("업로드").setIcon(drawable.ic_plus_24).setCancelable(                        false).setPositiveButton("확인",                        DialogInterface.OnClickListener { dialog, id ->                            val url = upLoadServerUri                            val values= ContentValues()                            if(spotName.text.toString()==null)                                values.put("name",spotName.hint.toString())                            else                                values.put("name",spotName.text.toString())                            values.put("author_id","mose")                            values.put("address",addr)                            values.put("photo_url",encodedImage)                            values.put("latitude",latitude.toString())                            values.put("longitude",longitude.toString())                            val networkTask = NetworkTask(url,values)                            networkTask.execute()                        }).setNegativeButton("취소 ",                        DialogInterface.OnClickListener { dialog, id ->                            // 취소 클릭. dialog 닫기.                            dialog.cancel()                        })                val alert = alt_bld.create()                alert.show()            }        })    }    inner class NetworkTask(private val url: String?, private val values: ContentValues?) : AsyncTask<Void, Void, String>() {        override fun doInBackground(vararg params: Void?): String? {            val result: String? // 요청 결과를 저장할 변수.            val requestHttpURLConnection = RequestHttpURLConnection()            result = requestHttpURLConnection.request(url!!, values) // 해당 URL로 부터 결과물을 얻어온다.            return result        }        override fun onPostExecute(s: String?) {            super.onPostExecute(s)            val intent = Intent(application, MapsActivity::class.java)            intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT)            startActivity(intent)        }    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        var bitmap: Bitmap        if (resultCode != Activity.RESULT_OK) {            return        }        when (requestCode) {            FROM_ALBUM -> {                //앨범에서 가져오기                if (data!!.data != null) {                    try {                        var albumFile: File?                        albumFile = createImageFile()                        photoURI = data.data                        albumURI = Uri.fromFile(albumFile)                        galleryAddPic()                        imageview.setImageURI(photoURI)                        bitmap = Images.Media.getBitmap(contentResolver,data!!.data)                        //업로드 하기위한 사이즈 조절//                        bitmap =resize(bitmap)                        //base64로 업로드 하기 위한 인코딩                        encodedImage=BitMapToString(bitmap)                        Log.d("bitmap",encodedImage)                    } catch (e: Exception) {                        e.printStackTrace()                        Log.v("알림", "앨범에서 가져오기 에러")                    }                }            }            FROM_CAMERA -> {                //카메라 촬영                try {                    Log.v("알림", "FROM_CAMERA 처리")                    galleryAddPic()                    imageview.setImageURI(imgUri)                    bitmap = Images.Media.getBitmap(contentResolver,data!!.data)                    //업로드 하기위한 사이즈 조절//                    bitmap =resize(bitmap)                    //base64로 업로드 하기 위한 인코딩                    encodedImage=BitMapToString(bitmap)                    Log.d("bitmap",encodedImage)                } catch (e: Exception) {                    e.printStackTrace()                }            }        }    }    private fun resize(bitmap: Bitmap):Bitmap{        val config=resources.configuration        var bm =bitmap        when {            config.smallestScreenWidthDp>=800 -> bm = Bitmap.createScaledBitmap(bm, 400, 240, true)            config.smallestScreenWidthDp>=600 -> bm = Bitmap.createScaledBitmap(bm, 300, 180, true)            config.smallestScreenWidthDp>=400 -> bm = Bitmap.createScaledBitmap(bm, 200, 120, true)            config.smallestScreenWidthDp>=360 -> bm = Bitmap.createScaledBitmap(bm, 180, 108, true)            else -> bm = Bitmap.createScaledBitmap(bm, 160, 96, true)        };        return bm    }    private fun makeDialog() {        val alt_bld = AlertDialog.Builder(this@EnrollMarkerActivity, style.MyAlertDialogStyle)        alt_bld.setTitle("사진 업로드").setIcon(drawable.ic_plus_24).setCancelable(                false).setPositiveButton("사진촬영",                DialogInterface.OnClickListener { dialog, id ->                    takePhoto()                }).setNeutralButton("앨범선택",                DialogInterface.OnClickListener { dialogInterface, id ->                    //앨범에서 선택                    selectAlbum()                }).setNegativeButton("취소   ",                DialogInterface.OnClickListener { dialog, id ->                    // 취소 클릭. dialog 닫기.                    dialog.cancel()                })        val alert = alt_bld.create()        alert.show()    }    private fun takePhoto() {        // 촬영 후 이미지 가져옴        val state = Environment.getExternalStorageState()        if (Environment.MEDIA_MOUNTED.equals(state)) {            val intent = Intent(ACTION_IMAGE_CAPTURE)            if (intent.resolveActivity(packageManager) != null) {                  var photoFile: File= createImageFile() //File(storageDir, imgFileName)                photoFile.let {                    val providerURI = FileProvider.getUriForFile(this, packageName, photoFile)                    imgUri = providerURI                    intent.putExtra(EXTRA_OUTPUT, providerURI)                    startActivityForResult(intent, FROM_CAMERA)                }            }        } else {            Log.v("알림", "저장공간에 접근 불가능")            return        }    }    //찍은 사진을 이미지 file로 만들기    @Throws(IOException::class)    fun createImageFile(): File {        val imgFileName = System.currentTimeMillis().toString() + ".jpg"        var imageFile: File?        val storageDir = File(Environment.getExternalStorageDirectory().toString() + "/Pictures")        if (!storageDir.exists()) {            Log.v("알림", "storageDir 존재 x $storageDir")            storageDir.mkdirs()        }        Log.v("알림", "storageDir 존재함 $storageDir")        imageFile = File(storageDir, imgFileName)        mCurrentPhotoPath = imageFile.absolutePath        return imageFile    }    //앨범 선택 클릭    fun selectAlbum() {        val intent = Intent(Intent.ACTION_PICK)        intent.type = Images.Media.CONTENT_TYPE        intent.type = "image/*"        startActivityForResult(intent, FROM_ALBUM)    }    fun BitMapToString(bitmap:Bitmap): String    {         val baos =  ByteArrayOutputStream()        bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos)   //bitmap compress        var  arr:ByteArray = baos.toByteArray()        var image= Base64.encodeToString(arr, Base64.NO_WRAP)        Log.d("beforeutf-8",image)        Log.d("afterutf-8",getURLEncode(image))        return getURLEncode(image)    }fun getURLEncode(content :String): String {   try {       return URLEncoder.encode(content, "utf-8")   }catch (e:Exception) {        Log.e("exception", e.toString())    }    return ""}    //촬영환 이미지 저장하기.    fun galleryAddPic() {        val mediaScanIntent = Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE)        val f = File(mCurrentPhotoPath)        val contentUri = Uri.fromFile(f)        mediaScanIntent.data = contentUri        sendBroadcast(mediaScanIntent)        Toast.makeText(this, "사진이 저장되었습니다", Toast.LENGTH_SHORT).show()    }    fun getPermission(){        //TedPermission 라이브러리 -> 카메라 권한 획득        val permissionlistener = object : PermissionListener {            override fun onPermissionGranted() {                Toast.makeText(this@EnrollMarkerActivity, "Permission Granted", Toast.LENGTH_SHORT).show()            }            override fun onPermissionDenied(deniedPermissions: List<String>) {                Toast.makeText(this@EnrollMarkerActivity, "Permission Denied\n$deniedPermissions", Toast.LENGTH_SHORT).show()            }        }        TedPermission.with(this)                .setPermissionListener(permissionlistener)                .setDeniedTitle("Permission denied").setDeniedMessage(                        "If you reject permission,you can not use this service\n\nPlease turn on permissions at [Setting] > [Permission]")                .setGotoSettingButtonText("Permission Adjust").setPermissions(Manifest.permission.READ_EXTERNAL_STORAGE,Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.CAMERA)                .check()    }}